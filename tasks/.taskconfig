/**
 * mg-audioPlayer
 * (c) elizabethnorthrup415@gmail.com <elizabethnorthrup415@gmail.com>
 */

var mainBowerFiles = require('main-bower-files');
var path = require('path');
var $env = require('gulp-util').env;

/**
 * Specifies whether a task should be executed in the debug environment. Tasks may perform differently
 * when running in debug (namely skipping compression processes).
 *
 * @type {Boolean}  --debug, --d, NODE_ENV = 'development' in env, GULP_CONFIG_DEBUG is present in env
 */
var debug = $env['debug'] || $env['d'] || process.env.NODE_ENV === 'development' || process.env.GULP_CONFIG_DEBUG;

/**
 * Supported options specified through CLI params when executing Gulp tasks. Note that if debug is true,
 * all 'skip-' flags are default to true.
 *
 * @type {Boolean}  --css-sourcemaps, --csm Specifies whether the pipeline will generate sourcemaps for CSS files.
 * @type {Boolean}  --js-sourcemaps, --jsm  Specifies whether the pipeline will generate sourcemaps for JS files.
 * @type {Number}   --port, --p             Specifies the port which BrowserSync will use when serving the app locally. Note
 *                                         that this value only affects the port that BrowserSync uses, not WEBrick (Rails server).
 *                                         This option is only available if you are executing a Gulp task that serves the app.
 *                                         The default value is 9000.
 * @type {Boolean}  --skip-css-min, --sc    Specifies whether CSS minification should be skipped.
 * @type {Boolean}  --skip-html-min, --sh   Specifies whether HTML minification should be skipped.
 * @type {Boolean}  --skip-js-min, --sj     Specifies whether JavaScript uglification should be skipped.
 * @type {Boolean}  --skip-rev, --sr        Specifies whether asset revisioning should be skipped.
 * @type {Boolean}  --serve, --s            Specifies whether the app will be served at the end of designated tasks.
 * @type {Boolean}  --watch, --w            Specifies whether files should be watched. This option is only available
 *                                         in designated tasks. When enabled, modified files will automatically be pipelined
 *                                         into their corresponding compile tasks and will trigger a browser refresh on
 *                                         complete.
 */
var env = {
  cssSourcemaps: $env['css-sourcemaps'] || $env['csm'],
  jsSourcemaps: $env['js-sourcemaps'] || $env['jsm'] || debug,
  port: $env['port'] || $env['p'],
  skipCSSMin: $env['skip-css-min'] || $env['sc'] || debug,
  skipHTMLMin: $env['skip-html-min'] || $env['sh'] || debug,
  skipJSMin: $env['skip-js-min'] || $env['sj'] || debug,
  skipRev: $env['skip-revision'] || $env['sr'] || debug,
  serve: $env['serve'] || $env['s'],
  watch: $env['watch'] || $env['w']
};

/**
 * Common extensions per file type for glob patterns.
 */
var patterns = {
  images: '{jpg,jpeg,gif,png,svg,ico}',
  videos: '{ogv,mp4}',
  scripts: '{js,js.erb,coffee}',
  sourcemaps: '{css.map,js.map}',
  styles: '{css,styl,less,scss,sass,css.erb,scss.erb,sass.erb}',
  templates: '{html,shtml,htm,html.erb,asp,php,md,jade}',
  data: '{json,yml,csv}',
  fonts: '{eot,svg,ttf,woff,woff2}',
  extras: 'txt'
};

/**
 * Common paths used throughout the Gulp pipeline.
 */
var paths = {
  src: path.join(__dirname, '../', 'app'),
  tmp: path.join(__dirname, '../', '.tmp'),
  build: path.join(__dirname, '../', 'public')
};

/**
 * Configuration for the 'clean' task.
 */
var clean = {
  entry: [paths.tmp, paths.build]
};

/**
 * Configuration for the 'images' task.
 */
var images = {
  entry: path.join(paths.src, '**', '*.' + patterns.images),
  output: paths.tmp
};

/**
 * Configuration for the 'videos' task.
 */
var videos = {
  entry: path.join(paths.src, 'videos', '**', '*.' + patterns.videos),
  output: path.join(paths.tmp, 'videos')
};

/**
 * Configuration for the 'fonts' task.
 */
var fonts = {
  entry: mainBowerFiles({ filter: '**/*.' + patterns.fonts }).concat(path.join(paths.src, 'fonts', '**', '*.' + patterns.fonts)),
  output: path.join(paths.tmp, 'fonts')
};

/**
 * Configuration for the 'extras' task.
 */
var extras = {
  entry: path.join(paths.src, '**', '*.' + patterns.extras),
  output: path.join(paths.tmp)
};

/**
 * Configuration for the 'styles' task.
 */
var styles = {
  entry: path.join(paths.src, 'styles', '*.' + patterns.styles),
  stylus: {
    'include css': true,
    include: [path.join(__dirname, '../', 'node_modules'), path.join(__dirname, '../', 'bower_components'), path.join(paths.src, 'styles')]
  },
  autoprefixer: {
    browsers: ['last 2 version', 'ie 9']
  },
  output: path.join(paths.tmp, 'styles')
};

/**
 * Configuration for the 'scripts' task.
 */
var scripts = {
  entry: path.join(paths.src, 'scripts', '*.' + patterns.scripts),
  output: path.join(paths.tmp, 'scripts')
};

/**
 * Configuration for the 'static' task.
 */
var static = {
  entry: [
    path.join(paths.tmp, '**', '*.' + patterns.images),
    path.join(paths.tmp, '**', '*.' + patterns.videos),
    path.join(paths.tmp, '**', '*.' + patterns.fonts),
    path.join(paths.tmp, '**', '*.' + patterns.extras)
  ],
  output: paths.build
};

/**
 * Configuration for the 'templates' task.
 */
var templates = {
  entry: path.join(paths.src, '**', '*.' + patterns.templates),
  output: paths.tmp,
  fileInclude: {
    prefix: '@@',
    basepath: paths.src+'/'
  }
};

/**
 * Configuration for the 'wiredep' task.
 */
var wiredep = {
  entry: path.join(paths.src, '**', '*.' + patterns.templates),
  output: paths.src,
  wiredep: {
    exclude: ['modernizr'],
    directory: 'bower_components',
    ignorePath: /^(\.\.\/)*\.\./
  }
};

/**
 * Configuration for the 'build' task.
 */
var build = {
  entry: path.join(paths.tmp, '**', '*.' + patterns.templates),
  output: paths.build,
  useref: {
    searchPath: [paths.tmp, '.']
  },
  revAll: {
    dontGlobal: [/favicon.*$/g, /og-image.*$/g, /rev-manifest.*$/g],
    dontRenameFile: patterns.templates.replace(/\{|\}/g, '').replace(/^/g, '.').replace(/\,/g, ',.').split(',')
  },
  minifyHTML: {
    empty: true,
    conditionals: true,
    loose: true
  }
};

/**
 * Configuration for the 'serve' task.
 */
var serve = {
  browserSync: {
    server: {
      baseDir: (debug) ? paths.tmp : paths.build,
      routes: {
        '/bower_components': 'bower_components'
      }
    },
    files: (debug) ? [paths.tmp] : [paths.build],
    notify: false,
    port: (typeof port === 'number') ? env.port : 9000
  }
};

/**
 * Configuration for file watching.
 */
var watch = {
  entries: [{
    files: path.join(paths.src, 'images', '**', '*.' + patterns.images),
    tasks: ['images']
  }, {
    files: path.join(paths.src, 'videos', '**', '*.' + patterns.videos),
    tasks: ['videos']
  }, {
    files: path.join(paths.src, 'fonts', '**', '*.' + patterns.videos),
    tasks: ['fonts']
  }, {
    files: path.join(paths.src, 'styles', '**', '*.' + patterns.styles),
    tasks: ['styles']
  }, {
    files: path.join(paths.src, '**', '*.' + patterns.templates),
    tasks: ['templates']
  }]
};

module.exports = {
  debug: debug,
  env: env,
  patterns: patterns,
  paths: paths,
  clean: clean,
  images: images,
  videos: videos,
  fonts: fonts,
  extras: extras,
  styles: styles,
  scripts: scripts,
  static: static,
  templates: templates,
  wiredep: wiredep,
  build: build,
  serve: serve,
  watch: watch
};
